reference link : https://www.youtube.com/watch?v=IBttEEFkH_Y&list=PLsyeobzWxl7pe_IiTfNyr55kwJPWbgxB5&index=82

my notes :

- TRIVIA : most of the class that ends with able, belongs to interface. (throwable is a exception not interface)
- We can only handle exception, we cannot handle errors. errors just stop the execution.
- example for errors include :
    - i) ThreadDeath
    - ii) Virtual Machine error -> Out of memory
    - iii) IO Error (input/output) error
- All the runtime exceptions are called as Unchecked exceptions, while all the other are checked.
- Unchkecked : when we write a code line , the complier will not force us handle exception. (its our choice to handle).
- Checked : If theres a checked exception, we need to fix that , the complier will force us to handle that exception.

official notes provided by prof :

In this lecture we are discussing about hierarachy of exception:
-- In Java, exceptions are objects that represent exceptional situations that can occur during program execution. 
The Java language provides a hierarchy of exception classes that are used to represent different types of errors and exceptional situations.

#Important points
-- Every class extends Object class so, Throwable class by default extends Object
-- The top-level class in the Java exception hierarchy is the Throwable class. All exception classes in Java are subclasses of the Throwable class.
-- The Throwable class has two subclasses: Error and Exception. 
-- The Error class represents serious errors that cannot be handled by the program, such as OutOfMemoryError or StackOverflowError.
-- The Exception class represents exceptions that can be caught and handled by the program.
-- The Exception class has many subclasses that represent specific types of exceptions. Some common subclasses of Exception include RuntimeException, IOException, SQLException, and NullPointerException.
-- Exception classes in Java can be either checked or unchecked.

Checked Exception:
Checked exceptions are those that are checked at compile-time, meaning the compiler ensures that the programmer handles the exception by either catching or declaring it in the method signature using the throws keyword. 
Examples of checked exceptions include IOException, SQLException, and ClassNotFoundException.

UnChecked Exception:
unchecked exceptions are not checked at compile-time, and the compiler does not force the programmer to handle them. Examples of unchecked exceptions include NullPointerException, ArrayIndexOutOfBoundsException, and
ArithmeticException.

hierrachry of exception
      Object class
            |
        Throwable
---------       ---------
|                       |
Error               Exception 
             -----------    ----------------------------------------------
            |                                   |                        |
        RuntimeEception(uncheked)          SQLException(checked)       IOException(checked)
            ArithmeticException
            NullPointerException
            ArrayIndexOutOfBoundsException 
