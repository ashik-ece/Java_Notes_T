Reference link : https://www.youtube.com/watch?v=A1uqgEz3hB0&list=PLsyeobzWxl7pe_IiTfNyr55kwJPWbgxB5&index=68

My notes :

- wkt, from previous notes that, Inside an abstract class, there can be purely abstract methods, or purely concrete methods (methods which are not abstract) and mixed (both abstract and concrete)
- when we have a abstract class which consist of only abstract methods (purely abstract method), we can represent it in another way. - Interfaces 
- most of the time we use interface in project development.
- syntax :

    Interface [class name] {
    
    }
- Interface is not a class. (thats the main difference between abstract class and interface.)
- By default, Every method in the interface is public abstract.(so we dont need to mention public abstract for methods in interface).  
- Basically, all the methods in a interface is a public abstract method.
- interface is used for design, interface tells you what are the methods we need, but it doesnt implement them. We use classes to implement those methods in the interface.
- In terms of abstract classes, to implement the abstract method in abstract class, we create another class and extend it to that abstract class.
- Here, in interface, instead of extends, we use "implements".
- when we put "implements", it is compulsory for us to implement (define) all the abstract methods.
    - if we fail to implement all the abstract methods, that class becomes abstract.
- When we implement, we cannot create object of the interface [classname] but we can create an object of the class which implements that interface (B)
- process is similar as abstract classes.

- When you want to create variables/attributes inside interface, we have to make them final and staic. (we dont need to mention them, but the variables which are created will be final and static)
    - since we saying its final, we have to initialize the variable
    - since they are static, we can directly use them with the help of interface name. (classname.variable)
    - since they are final, we wont be able to change the value (non mutable)
- Why the attributes are final and static?
    Answer :
        - we dont instantiate interface, we always instantiate a class.
        - we are not extending, but implementing
        - we get only the methods from implements and not the attributes or variables. (reason for static)
        - the reason they are final because, interface dont have their own memory in heap so how can they have non final value. (if you dont have memory, then how can you store and change a value?)

Official notes provided by prof:

In this lecture we will learn:
What is an interface in java?
Use of interface
implements keyword in an interface
Variables in an interface 

#1
Interface:-
In an abstract class, we can have both abstract methods as well as normal or concrete methods.
If your class has only abstract methods then instead of using class, you can simply use an interface in place of it.
Interface is not any class.
Every method in an interface is public and abstract by default.
Even if you do not use two keywords (public and abstract) with methods then also it will not give an error in an interface. By default, it will consider all methods as public and abstract.
We cannot instantiate an interface.
Interface only shows the design and it does not provide any implementation.
To provide an implementation of methods, you need to create a class and instantiate it also.
e.g,
 interface A
 {
  methods()----
 }

#2
implements keyword:-
To implement an interface, we use the keyword - implements.
If you use the implements keyword with class, then it is compulsory to give an implementation of all the methods that are defined in an interface.
If you do not give an implementation of all methods then it will make your class an abstract class by default.
So, to make a concrete class, you have to give the implementation of all methods present in an interface.
e.g., 
 class B implements A
 {
  methods() {
   statement;
  }
  ------
 }

#3
Variables in an interface:-
We can call the methods of an interface by creating an object of the class that implements an interface.
We can also declare variables in an interface.
All the variables in an interface are final and static by default.
So, we first have to initialize the variables in an interface.
As a variable is static in an interface, then you do not need to create an object for it. You can directly call the variable by using the interface name.
e.g., A.area;    (here, area is a variable initialized in an interface)
As the variable is final, you can not change the value of that variable after initializing it once.

-Interface does not have its own memory in the heap.
