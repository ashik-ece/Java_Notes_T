reference link : https://www.youtube.com/watch?v=k_SJOnVa_G0&list=PLsyeobzWxl7pe_IiTfNyr55kwJPWbgxB5&index=45

MY NOTES:

eg code :


class Human {
  private int age;
  private string name;

  public int getAge() {
      return age;
    }
  public void setAge(int a ) { // (int age, Human obj) // if a was named age, the system will get confused as to age refers to the local or instance variable. And java will prioritize local
      age = a;
      // Human Obj1 = obj;
      // obj1.age = age
    }
  public string getName() {
      return name;
    }
    public void SetName(string n) {
      name = n;
    }
}

- In the above code, the varriable a is called as local variable. And the variable age is called as Instance variable.

- Every method (including main) will have its own stack (which consist of the name of the objects to be executed and their addresses[which is linked to heap])
- if we have local and instance variable (with same name) in a line of code, in java, local varibale is given priority
- One to differentiate local variable and instance variable is by passing the object itself.

- THIS IS A KEYWORD WHICH REPRESENTS THE CURRENT OBJECT
    - what is currrent object mean ? :
        - answer: The object which is calling the method is the current object
- this.name, here the name represents instance varible which is called by the current object and not local variable (which is used in the method to pass as a parameter)
- This keyword refers to the current instance of a class.
- when we want to refer to the object itself we use this keyword


OFFICIAL NOTES GIVEN BY PROF:

In this lecture we will see:
Instance variable and Local variable
Can we declare two or more variables with the same name?
This keyword and its uses in Java

#1
Instance variable:- These variables are declared within a class but outside a method.
These variables are created when we create an object and are destroyed when the object is destroyed.

Local variable:- These variables are declared within a method but do not get any default value.
They are created when we enter a method or constructor and get destroyed when the call returns from the method.

#2
In Java, it is not allowed to declare two or more variables having the same name inside a scope either in class scope or method scope.
The preference is always given to the local variable.
Creating an object is not a good idea to solve the issue of conflicting names of instance and local variables.
We can differentiate between local and instance variables by passing an object itself.
Instead of writing and passing an object, we can simply use this keyword.

#3
This keyword:-
This keyword represents the current object.
Current object is an object which is calling the method.
This keyword is used to invoke the current class constructor.
Using the 'this' keyword, we can return the current class instance.
This keyword can be used as an argument in the constructor call.
