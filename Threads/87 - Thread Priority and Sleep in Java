Reference link : https://www.youtube.com/watch?v=yyLy-an_CXY&list=PLsyeobzWxl7pe_IiTfNyr55kwJPWbgxB5&index=90

My notes:

- Threads priority : 1 is the lowest priortiy and the 10 is the higest prioerity. 5 is the default priority.
- we can use setPriority() to set the priority 
- we can either choose priority from number or we can choose Max priority, min priority and notmal priority
- using priority we can only suggest to the scheduler,each schedular has its own algorithms that it abide to.
- we cam use thread.sleep to make our thread to wait, (in milliseconds)
- The sleep method throws an interupted exception. (we can use try catch to fix it)
- by using the sleep method on both the classes, we can get them to execute together , one after another.


Official class notes provided by prof:

In this lecture we will learn:
Thread priority in Java
How we can suggest a priority for a thread?
Sleep() method in thread
Waiting state in a thread


#1
We cannot control the schedular, we can only give suggestions to it to give priority.
getPriority() is a method that gives the current priority of a thread.
The range of priority goes from 1 to 10. One is the least priority whereas ten is the maximum priority.
5 is the default priority or normal priority. By default, every thread has a normal priority which is 5.
We can also change the priority by using the setPriority().
Different schedulers have different algorithms to work upon so by giving priority, we can only give suggestions to it. 
It might be possible that the scheduler gives the highest priority to the process that will execute in less time at the running phase.

#2
We can also make a thread to wait for some time and then execute the statement further.
Thread will wait by using the sleep() method.
In the sleep() method, we have the pass value for how much time we want a thread to wait. The time will be in milliseconds.
Sleep() method will throw an interrupted exception. So, we can handle an exception by using the try-catch block.
When we use sleep(), then the thread goes into the waiting state.

As a programmer, we can not control a thread, we can only optimise it.
